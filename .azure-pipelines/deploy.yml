trigger:
  branches:
    include:
    - '*'

pr: none

variables:
  terraformWorkingDirectory: '$(Build.sourcesDirectory)/tf-deploy'
  backendServiceArm: 'sandbox-spn'
  backendAzureRmResourceGroupName: 'rg-sandbox_tfstate-box-uksouth-01'
  backendAzureRmStorageAccountName: 'sasandboxtfboxuksouth01'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'sandbox-box.tfstate'
  environmentServiceNameAzureRM: 'sandbox-spn'
  varFile: './../tf-vars/sandbox.tfvars'

jobs:
- job: TerraformPlanAndApply

  variables:
    commandOptions: '-var-file="$(varFile)"'

  steps:
    - task: TerraformInstaller@0
      displayName: 'Terraform: Install'
      inputs:
        terraformVersion: '1.1.2'

    - task: TerraformTaskV2@2
      displayName: 'Terraform: Init'
      inputs:
        workingDirectory: '$(terraformWorkingDirectory)'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'

    - task: TerraformTaskV2@2
      displayName: 'Terraform: Validate'
      inputs:
        command: validate
        workingDirectory: '$(terraformWorkingDirectory)'
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

    - task: TerraformTaskV2@2
      displayName: 'Terraform: Plan'
      inputs:
        command: plan
        workingDirectory: '$(terraformWorkingDirectory)'
        commandOptions: '$(commandOptions)'
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

    - task: TerraformTaskV2@2
      displayName: 'Terraform: Apply'
      name: 'terraform_apply'
      inputs:
        command: apply
        workingDirectory: '$(terraformWorkingDirectory)'
        commandOptions: '$(commandOptions)'
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

    - powershell: |
        $terraformOutput = Get-Content "$(terraform_apply.jsonOutputVariablesPath)" | ConvertFrom-Json
        $terraformOutput | Get-Member -MemberType NoteProperty | % { 
          $o = $terraformOutput.($_.Name)
          Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" 
          Write-Host "$($_.Name)" 
        }
      name: terraform_output
      displayName: 'Pass-through Terraform Outputs'